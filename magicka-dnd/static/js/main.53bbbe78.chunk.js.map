{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["elements","map","elementName","name","imageLink","arcane","cold","earth","fire","ice","life","lightning","poison","shield","steam","water","opposingElements","cancelingSubElements","combiningElements","App","props","state","spellBar","maxElements","usePoison","document","addEventListener","event","key","toLowerCase","addToSpellBar","e0","e1","undefined","element","this","length","i","checkOpposing","setState","slice","combiningElement","combinedElement","newSpellBar","indexLeft","indexRight","output","countElement","toUpperCase","join","forward","area","weapon","self","elementsUsedSet","Set","add","elementsUsed","Array","from","sort","a","b","shieldCount","elementsExceptShield","splice","findIndex","getElementNames","earthCount","elementsExceptShieldAndEarth","iceCount","elementsExceptShieldAndIce","arcaneCount","lifeCount","style","display","paddingLeft","paddingRight","height","type","width","value","onChange","target","checked","src","alt","onClick","cursor","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.53bbbe78.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\ninterface Element {\n    name: string;\n    imageLink: string;\n}\n\ninterface AppState {\n    spellBar: Element[];\n    maxElements: number;\n    usePoison: boolean;\n}\n\nconst elements = [\n    'arcane',\n    'cold',\n    'earth',\n    'fire',\n    'ice',\n    'life',\n    'lightning',\n    'poison',\n    'shield',\n    'steam',\n    'water',\n].map((elementName) => {\n    return {\n        name: elementName,\n        imageLink: `images/Element_${elementName}.webp`\n    }\n});\n\nconst [arcane, cold, earth, fire, ice, life, lightning, poison, shield, steam, water] = [...elements];\n\nconst opposingElements = {\n    [arcane.name]: [life],\n    [life.name]: [arcane],\n    [water.name]: [lightning],\n    [shield.name]: [shield],\n    [cold.name]: [fire],\n    [lightning.name]: [water, earth],\n    [earth.name]: [lightning],\n    [fire.name]: [cold]\n};\n\nconst cancelingSubElements = {\n    [fire.name]: [[ice, fire],],\n    [life.name]: [[poison, water]],\n    [poison.name]: [[life, water]],\n    [ice.name]: [[fire, water]],\n    [steam.name]: [[cold, water]],\n}\n\nconst combiningElements = {\n    [water.name]: [[fire, steam], [cold, ice], [arcane, poison]],\n    [fire.name]: [[water, steam],],\n    [cold.name]: [[steam, water], [water, ice]],\n    [arcane.name]: [[water, poison]],\n};\n\n\n\nclass App extends React.Component<{}, AppState> {\n\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            spellBar: [],\n            maxElements: 5,\n            usePoison: false,\n        };\n\n        document.addEventListener('keypress', (event) => {\n            switch (event.key.toLowerCase()) {\n                case 'q':\n                    this.addToSpellBar(water);\n                    break;\n                case 'w':\n                    this.addToSpellBar(life);\n                    break;\n                case 'e':\n                    this.addToSpellBar(shield);\n                    break;\n                case 'r':\n                    this.addToSpellBar(cold);\n                    break;\n                case 'a':\n                    this.addToSpellBar(lightning);\n                    break;\n                case 's':\n                    this.addToSpellBar(arcane);\n                    break;\n                case 'd':\n                    this.addToSpellBar(earth);\n                    break;\n                case 'f':\n                    this.addToSpellBar(fire);\n                    break;\n                default:\n                    break;\n            }\n        })\n    }\n\n    checkOpposing(e0: Element, e1: Element): boolean {\n        if (opposingElements[e0.name] !== undefined) {\n            for (const opposingElement of opposingElements[e0.name]) {\n                if (opposingElement === e1) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    addToSpellBar(element: Element) {\n\n        const spellBar = this.state.spellBar;\n\n        if (spellBar.length > 0) {\n\n            for (let i = spellBar.length - 1; i >= 0; i--) {\n                if (this.checkOpposing(spellBar[i], element)) {\n                    this.setState({\n                        spellBar: [...spellBar.slice(0, i), ...spellBar.slice(i + 1, spellBar.length)]\n                    });\n\n                    return;\n                }\n\n                if (cancelingSubElements[spellBar[i].name] !== undefined) {\n                    for (const [combiningElement, combinedElement] of cancelingSubElements[spellBar[i].name]) {\n\n                        if (combiningElement === element) {\n\n                            let newSpellBar = [...spellBar.slice(0, i), combinedElement, ...spellBar.slice(i + 1, spellBar.length)];\n\n                            let indexLeft = i;\n                            let indexRight = i;\n\n                            while (indexLeft >= 0 || indexRight <= this.state.maxElements - 1) {\n                                indexLeft--;\n                                if (indexLeft >= 0) {\n                                    if (this.checkOpposing(newSpellBar[indexLeft], combinedElement)) {\n                                        this.setState({\n                                            spellBar: [...newSpellBar.slice(0, indexLeft), ...newSpellBar.slice(indexLeft + 1, i), ...newSpellBar.slice(i + 1, newSpellBar.length)]\n                                        });\n\n                                        return;\n                                    }\n                                }\n\n                                indexRight++;\n                                if (indexRight < newSpellBar.length) {\n                                    if (this.checkOpposing(newSpellBar[indexRight], combinedElement)) {\n                                        this.setState({\n                                            spellBar: [...newSpellBar.slice(0, i), ...newSpellBar.slice(i + 1, indexRight), ...newSpellBar.slice(indexRight + 1, newSpellBar.length)]\n                                        });\n\n                                        return;\n                                    }\n                                }\n                            }\n\n                            this.setState({\n                                spellBar: newSpellBar\n                            });\n\n                            return;\n                        }\n                    }\n                }\n            }\n\n            for (let i = spellBar.length - 1; i >= 0; i--) {\n                if (combiningElements[spellBar[i].name] !== undefined) {\n                    for (const [combiningElement, combinedElement] of combiningElements[spellBar[i].name]) {\n                        if (combiningElement === element) {\n\n                            if (!this.state.usePoison && combinedElement === poison) {\n                                continue;\n                            }\n\n                            this.setState({\n                                spellBar: [...spellBar.slice(0, i), combinedElement, ...spellBar.slice(i + 1, spellBar.length)]\n                            });\n\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (this.state.spellBar.length < this.state.maxElements) {\n            this.setState({\n                spellBar: [...spellBar, element]\n            });\n        }\n    }\n\n    countElement(element: Element): number {\n        let output = 0;\n\n        for (const barElement of this.state.spellBar) {\n            if (element === barElement) {\n                output++;\n            }\n        }\n\n        return output;\n    }\n\n    get shieldCount(): number {\n        return this.countElement(shield);\n    }\n\n    get earthCount(): number {\n        return this.countElement(earth);\n    }\n\n    get iceCount(): number {\n        return this.countElement(ice);\n    }\n\n    get arcaneCount(): number {\n        return this.countElement(arcane);\n    }\n\n    get lifeCount(): number {\n        return this.countElement(life);\n    }\n\n    get steamCount(): number {\n        return this.countElement(steam);\n    }\n\n    get lightningCount(): number {\n        return this.countElement(lightning);\n    }\n\n    get waterCount(): number {\n        return this.countElement(water);\n    }\n\n    get fireCount(): number {\n        return this.countElement(fire);\n    }\n\n    get coldColunt(): number {\n        return this.countElement(cold);\n    }\n\n    get poisonCount(): number {\n        return this.countElement(poison);\n    }\n\n    getElementNames(elements: Element[]): string {\n        return elements.map((element) => {\n            return `${element.name[0].toUpperCase()}${element.name.slice(1)}`;\n        }).join(' ');\n    }\n\n    render() {\n\n        let forward: JSX.Element = <span></span>;\n        let area: JSX.Element = <span></span>;\n        let weapon: JSX.Element = <span></span>;\n        let self: JSX.Element = <span></span>;\n\n        let elementsUsedSet = new Set<Element>();\n\n        for (let element of this.state.spellBar) {\n            elementsUsedSet.add(element);\n        }\n\n        let elementsUsed = Array.from(elementsUsedSet).sort((a, b) => {\n            if (a.name < b.name) {\n                return -1;\n            } else if (a.name > b.name) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n\n\n        if (this.state.spellBar.length === 0) {\n\n            // No Elements\n\n            forward = (\n                <div>\n                    <h4>Wind Burst</h4>\n                </div>\n            );\n\n            area = (\n                <div>\n                    <h4>Wind Burst</h4>\n                </div>\n            );\n        } else if (this.state.spellBar.length === 1 && this.state.spellBar[0] === shield) {\n\n            // Just Shield\n\n            forward = (\n                <div>\n                    <h4>Arc Shield</h4>\n                </div>\n            );\n\n            area = (\n                <div>\n                    <h4>Sphere Shield</h4>\n                </div>\n            );\n\n            weapon = (\n                <div>\n                    <h4>Wall Shield</h4>\n                </div>\n            );\n\n            self = (\n                <div>\n                    <h4>Force Armor</h4>\n                </div>\n            );\n        } else if (this.shieldCount === 1) {\n\n            // Shield\n\n            let elementsExceptShield = [...elementsUsed];\n            elementsExceptShield.splice(elementsExceptShield.findIndex(element => element === shield), 1);\n\n            self = (\n                <div>\n                    <h4>{this.getElementNames(elementsExceptShield)} Armor</h4>\n                </div>\n            );\n\n            if (this.earthCount >= 1) {\n\n                let elementsExceptShieldAndEarth = [...elementsExceptShield];\n                elementsExceptShieldAndEarth.splice(elementsExceptShieldAndEarth.findIndex(element => element === earth), 1);\n\n                // Shield + Earth\n\n                forward = (\n                    <div>\n                        <h4>Arc {this.getElementNames(elementsExceptShieldAndEarth)} Earth Wall</h4>\n                    </div>\n                );\n\n                area = (\n                    <div>\n                        <h4>Circular {this.getElementNames(elementsExceptShieldAndEarth)} Earth Wall</h4>\n                    </div>\n                );\n\n                weapon = (\n                    <div>\n                        <h4>Straight {this.getElementNames(elementsExceptShieldAndEarth)} Earth Wall</h4>\n                    </div>\n                );\n            } else if (this.iceCount >= 1) {\n\n                let elementsExceptShieldAndIce = [...elementsExceptShield];\n                elementsExceptShieldAndIce.splice(elementsExceptShieldAndIce.findIndex(element => element === ice), 1);\n\n                // Shield + Ice\n\n                forward = (\n                    <div>\n                        <h4>Arc {this.getElementNames(elementsExceptShieldAndIce)} Ice Wall</h4>\n                    </div>\n                );\n\n                area = (\n                    <div>\n                        <h4>Circular {this.getElementNames(elementsExceptShieldAndIce)} Ice Wall</h4>\n                    </div>\n                );\n\n                weapon = (\n                    <div>\n                        <h4>Straight {this.getElementNames(elementsExceptShieldAndIce)} Ice Wall</h4>\n                    </div>\n                );\n            } else if (this.arcaneCount >= 1 || this.lifeCount >= 1) {\n\n                // Mines\n\n                forward = (\n                    <div>\n                        <h4>Arc {this.getElementNames(elementsExceptShield)} Mines</h4>\n                    </div>\n                );\n\n                area = (\n                    <div>\n                        <h4>Circular Surrounding {this.getElementNames(elementsExceptShield)} Mines</h4>\n                    </div>\n                );\n\n                weapon = (\n                    <div>\n                        <h4>Straight Line {this.getElementNames(elementsExceptShield)} Mines</h4>\n                    </div>\n                );\n            } else {\n\n                // Spray Wall\n\n                forward = (\n                    <div>\n                        <h4>Arc {this.getElementNames(elementsExceptShield)} Wall</h4>\n                    </div>\n                );\n\n                area = (\n                    <div>\n                        <h4>Circular Surrounding {this.getElementNames(elementsExceptShield)} Wall</h4>\n                    </div>\n                );\n\n                weapon = (\n                    <div>\n                        <h4>Straight Line {this.getElementNames(elementsExceptShield)} Wall</h4>\n                    </div>\n                );\n\n            }\n\n        } else if (this.earthCount >= 1) {\n\n            // Projectile\n\n            forward = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Projectile</h4>\n                </div>\n            );\n\n            area = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Quake</h4>\n                </div>\n            );\n\n            weapon = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Fissure</h4>\n                </div>\n            );\n\n            self = (\n                <div>\n                    <h4>Drop {this.getElementNames(elementsUsed)} on head</h4>\n                </div>\n            );\n\n        } else if (this.iceCount >= 1) {\n\n            forward = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Barrage</h4>\n                </div>\n            );\n\n            area = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Spikes</h4>\n                </div>\n            );\n\n            weapon = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Blade</h4>\n                </div>\n            );\n\n            self = (\n                <div>\n                    <h4>Drop {this.getElementNames(elementsUsed)} on head</h4>\n                </div>\n            );\n        } else {\n            forward = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Spray</h4>\n                </div>\n            );\n\n            area = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Area Spray</h4>\n                </div>\n            );\n\n            weapon = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Blade</h4>\n                </div>\n            );\n\n            self = (\n                <div>\n                    <h4>Use {this.getElementNames(elementsUsed)} on Self</h4>\n                </div>\n            );\n        }\n\n        return (\n            <div style={{ display: 'flex' }}>\n                <div style={{ paddingLeft: '5px', paddingRight: '5px' }}>\n                    <div style={{ height: '200px' }}>\n                        Max Elements: <input\n                            type='number'\n                            style={{ width: '50px' }}\n                            value={this.state.maxElements}\n                            onChange={(event) => {\n                                this.setState((state) => {\n                                    return {\n                                        maxElements: +event.target.value,\n                                        spellBar: state.spellBar.slice(0, +event.target.value)\n                                    }\n                                });\n                            }}\n                        ></input><br />\n                        <input\n                            type='checkbox'\n                            checked={this.state.usePoison}\n                            onChange={(event) => {\n                                this.setState((state) => {\n                                    return {\n                                        usePoison: event.target.checked,\n                                        spellBar: []\n                                    }\n                                });\n                            }}\n                        ></input> Use Poison\n                        <h3>Spell Bar</h3>\n                        <div style={{ height: '50px' }}>\n                            {this.state.spellBar.map((element) => <img src={`${element.imageLink}`} alt={`${element.name}`}></img>)}\n                        </div>\n                        <button onClick={() => { this.setState({ spellBar: [] }) }}>Clear</button>\n                    </div>\n                    <br />\n                    <br />\n                    <br />\n                    <div>\n                        {[water, life, shield, cold].slice(0, 4).map((element) => (\n                            <img\n                                style={{ cursor: 'pointer' }}\n                                src={`${element.imageLink}`}\n                                onClick={(event) => {\n                                    this.addToSpellBar(element);\n                                }}\n                                alt={`${element.name}`}\n                            >\n                            </img>))}\n                        QWER\n                        <br />\n                        {[lightning, arcane, earth, fire].slice(0, 4).map((element) => (\n                            <img\n                                style={{ cursor: 'pointer' }}\n                                src={`${element.imageLink}`}\n                                onClick={(event) => {\n                                    this.addToSpellBar(element);\n                                }}\n                                alt={`${element.name}`}\n                            >\n                            </img>))}\n                        ASDF\n                        <br />\n                        <br />\n                        <img src='images/Element_steam.webp' alt='steam'></img> = <img src='images/Element_fire.webp' alt='fireImage'></img> + <img src='images/Element_water.webp' alt='water'></img> <br />\n                        <img src='images/Element_ice.webp' alt='ice'></img> = <img src='images/Element_cold.webp' alt='coldImage'></img> + <img src='images/Element_water.webp' alt='water'></img> <br />\n                        {this.state.usePoison ? <span><img src='images/Element_poison.webp' alt='poison'></img> = <img src='images/Element_arcane.webp' alt='arcane'></img> + <img src='images/Element_water.webp' alt='water'></img></span> : ''}\n\n                    </div>\n                </div>\n\n                <div style={{ paddingLeft: '15px', paddingRight: '15px' }}>\n                    <h3>Forward Cast</h3>\n                    {forward}\n                </div>\n                <div style={{ paddingLeft: '15px', paddingRight: '15px' }}>\n                    <h3>Area Cast</h3>\n                    {area}\n                </div>\n                <div style={{ paddingLeft: '15px', paddingRight: '15px' }}>\n                    <h3>Weapon Cast</h3>\n                    {weapon}\n                </div>\n                <div style={{ paddingLeft: '15px', paddingRight: '15px' }}>\n                    <h3>Self Cast</h3>\n                    {self}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}