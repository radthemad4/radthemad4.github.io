{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["elements","map","elementName","name","imageLink","arcane","cold","earth","fire","ice","life","lightning","poison","shield","steam","water","opposingElements","cancelingSubElements","combiningElements","App","props","state","spellBar","maxElements","usePoison","document","addEventListener","event","key","toLowerCase","addToSpellBar","e0","e1","undefined","element","this","length","i","checkOpposing","setState","slice","combiningElement","combinedElement","newSpellBar","indexLeft","indexRight","output","countElement","separator","finalSeparator","array","toUpperCase","last","pop","join","comboDiv","self","elementsUsedSet","Set","add","elementsUsed","Array","from","sort","a","b","style","fontSize","shieldCount","elementsExceptShield","splice","findIndex","filter","item","armorThreshold","earthCount","iceCount","descriptorElements","waterCount","push","coldCount","steamCount","fireCount","auraCount","Math","max","lifeCount","lightningCount","arcaneCount","poisonCount","getElementNames","earthAndIce","damageReduction","floor","elementsBesidesEarthIceAndShield","auraAreaString","replace","elementsExceptShieldAndEarth","elementsExceptShieldAndIce","elementsExceptLightning","display","paddingLeft","paddingRight","flexShrink","height","type","width","value","onChange","target","checked","src","alt","onClick","cursor","paddingTop","paddingBottom","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.753ed206.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\ninterface Element {\n    name: string;\n    imageLink: string;\n}\n\ninterface AppState {\n    spellBar: Element[];\n    maxElements: number;\n    usePoison: boolean;\n}\n\nconst elements = [\n    'arcane',\n    'cold',\n    'earth',\n    'fire',\n    'ice',\n    'life',\n    'lightning',\n    'poison',\n    'shield',\n    'steam',\n    'water',\n].map((elementName) => {\n    return {\n        name: elementName,\n        imageLink: `images/Element_${elementName}.webp`\n    }\n});\n\nconst [arcane, cold, earth, fire, ice, life, lightning, poison, shield, steam, water] = [...elements];\n\nconst opposingElements = {\n    [arcane.name]: [life],\n    [life.name]: [arcane],\n    [water.name]: [lightning],\n    [shield.name]: [shield],\n    [cold.name]: [fire],\n    [lightning.name]: [water, earth],\n    [earth.name]: [lightning],\n    [fire.name]: [cold]\n};\n\nconst cancelingSubElements = {\n    [fire.name]: [[ice, fire],],\n    [life.name]: [[poison, water]],\n    [poison.name]: [[life, water]],\n    [ice.name]: [[fire, water]],\n    [steam.name]: [[cold, water]],\n}\n\nconst combiningElements = {\n    [water.name]: [[fire, steam], [cold, ice], [arcane, poison]],\n    [fire.name]: [[water, steam],],\n    [cold.name]: [[steam, water], [water, ice]],\n    [arcane.name]: [[water, poison]],\n};\n\n\n\nclass App extends React.Component<{}, AppState> {\n\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            spellBar: [],\n            maxElements: 5,\n            usePoison: false,\n        };\n\n        document.addEventListener('keypress', (event) => {\n            switch (event.key.toLowerCase()) {\n                case 'q':\n                    this.addToSpellBar(water);\n                    break;\n                case 'w':\n                    this.addToSpellBar(life);\n                    break;\n                case 'e':\n                    this.addToSpellBar(shield);\n                    break;\n                case 'r':\n                    this.addToSpellBar(cold);\n                    break;\n                case 'a':\n                    this.addToSpellBar(lightning);\n                    break;\n                case 's':\n                    this.addToSpellBar(arcane);\n                    break;\n                case 'd':\n                    this.addToSpellBar(earth);\n                    break;\n                case 'f':\n                    this.addToSpellBar(fire);\n                    break;\n                default:\n                    break;\n            }\n        })\n    }\n\n    checkOpposing(e0: Element, e1: Element): boolean {\n        if (opposingElements[e0.name] !== undefined) {\n            for (const opposingElement of opposingElements[e0.name]) {\n                if (opposingElement === e1) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    addToSpellBar(element: Element) {\n\n        const spellBar = this.state.spellBar;\n\n        if (spellBar.length > 0) {\n\n            for (let i = spellBar.length - 1; i >= 0; i--) {\n                if (this.checkOpposing(spellBar[i], element)) {\n                    this.setState({\n                        spellBar: [...spellBar.slice(0, i), ...spellBar.slice(i + 1, spellBar.length)]\n                    });\n\n                    return;\n                }\n            }\n\n            for (let i = spellBar.length - 1; i >= 0; i--) {\n\n                if (cancelingSubElements[spellBar[i].name] !== undefined) {\n                    for (const [combiningElement, combinedElement] of cancelingSubElements[spellBar[i].name]) {\n\n                        if (combiningElement === element) {\n\n                            let newSpellBar = [...spellBar.slice(0, i), combinedElement, ...spellBar.slice(i + 1, spellBar.length)];\n\n                            let indexLeft = i;\n                            let indexRight = i;\n\n                            while (indexLeft >= 0 || indexRight <= this.state.maxElements - 1) {\n                                indexLeft--;\n                                if (indexLeft >= 0) {\n                                    if (this.checkOpposing(newSpellBar[indexLeft], combinedElement)) {\n                                        this.setState({\n                                            spellBar: [...newSpellBar.slice(0, indexLeft), ...newSpellBar.slice(indexLeft + 1, i), ...newSpellBar.slice(i + 1, newSpellBar.length)]\n                                        });\n\n                                        return;\n                                    }\n                                }\n\n                                indexRight++;\n                                if (indexRight < newSpellBar.length) {\n                                    if (this.checkOpposing(newSpellBar[indexRight], combinedElement)) {\n                                        this.setState({\n                                            spellBar: [...newSpellBar.slice(0, i), ...newSpellBar.slice(i + 1, indexRight), ...newSpellBar.slice(indexRight + 1, newSpellBar.length)]\n                                        });\n\n                                        return;\n                                    }\n                                }\n                            }\n\n                            this.setState({\n                                spellBar: newSpellBar\n                            });\n\n                            return;\n                        }\n                    }\n                }\n            }\n\n            for (let i = spellBar.length - 1; i >= 0; i--) {\n                if (combiningElements[spellBar[i].name] !== undefined) {\n                    for (const [combiningElement, combinedElement] of combiningElements[spellBar[i].name]) {\n                        if (combiningElement === element) {\n\n                            if (!this.state.usePoison && combinedElement === poison) {\n                                continue;\n                            }\n\n                            this.setState({\n                                spellBar: [...spellBar.slice(0, i), combinedElement, ...spellBar.slice(i + 1, spellBar.length)]\n                            });\n\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (this.state.spellBar.length < this.state.maxElements) {\n            this.setState({\n                spellBar: [...spellBar, element]\n            });\n        }\n    }\n\n    countElement(element: Element): number {\n        let output = 0;\n\n        for (const barElement of this.state.spellBar) {\n            if (element === barElement) {\n                output++;\n            }\n        }\n\n        return output;\n    }\n\n    get shieldCount(): number {\n        return this.countElement(shield);\n    }\n\n    get earthCount(): number {\n        return this.countElement(earth);\n    }\n\n    get iceCount(): number {\n        return this.countElement(ice);\n    }\n\n    get arcaneCount(): number {\n        return this.countElement(arcane);\n    }\n\n    get lifeCount(): number {\n        return this.countElement(life);\n    }\n\n    get steamCount(): number {\n        return this.countElement(steam);\n    }\n\n    get lightningCount(): number {\n        return this.countElement(lightning);\n    }\n\n    get waterCount(): number {\n        return this.countElement(water);\n    }\n\n    get fireCount(): number {\n        return this.countElement(fire);\n    }\n\n    get coldCount(): number {\n        return this.countElement(cold);\n    }\n\n    get poisonCount(): number {\n        return this.countElement(poison);\n    }\n\n    getElementNames(elements: Element[], separator: string = ' ', finalSeparator?: string): string {\n        let array = elements.map((element) => {\n            return `${element.name[0].toUpperCase()}${element.name.slice(1)}`;\n        });\n\n        if (finalSeparator && elements.length > 1) {\n            let last = array.pop();\n            return [array.join(separator), last].join(finalSeparator);\n        } else {\n            return array.join(separator);\n        }\n    }\n\n    render() {\n\n        let comboDiv: JSX.Element = <span></span>;\n\n        let forward: JSX.Element = <span></span>;\n        let area: JSX.Element = <span></span>;\n        let weapon: JSX.Element = <span></span>;\n        let self: JSX.Element = <span></span>;\n\n        let elementsUsedSet = new Set<Element>();\n\n        for (let element of this.state.spellBar) {\n            elementsUsedSet.add(element);\n        }\n\n        let elementsUsed = Array.from(elementsUsedSet).sort((a, b) => {\n            if (a.name < b.name) {\n                return -1;\n            } else if (a.name > b.name) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n\n\n        if (this.state.spellBar.length === 0) {\n\n            // No Elements\n\n            comboDiv = <div>\n                <div style={{ fontSize: 'larger' }}><b style={{ fontSize: 'larger' }}>Wind Burst</b><br /></div>\n                <b style={{ fontSize: 'larger' }}>Evocation [Air]</b><br />\n                <b>Components:</b> S<br />\n                <b>Casting Time:</b> See text<br />\n                <b>Range:</b> See text<br />\n                <b>Area:</b> Radial or Cone Shaped Burst, see text<br />\n                <b>Duration:</b> Instantaneous<br />\n                <b>Saving Throw:</b> Fortitude Negates (object)<br />\n                <b>Spell Resistance:</b> No<br />\n                <br />\n                Creates a blast of air that originates from you, affecting all creatures in its path in a cone, or in a sphere originating from you. If cast as a full round action, the wind force is one category stronger and has double the range. If cast as a swift action, the wind force is one category weaker and has half the range. You may choose to use a smaller range or weaker wind force.\n                <br /><br />\n                <table>\n                    <tr><th>Caster Level</th><th>Default Wind Force</th><th>Radial Range</th><th>Cone Range</th></tr>\n                    <tr><td>1</td><td>Strong</td><td>15 ft</td><td>30 ft</td></tr>\n                    <tr><td>5</td><td>Severe</td><td>30 ft</td><td>60 ft</td></tr>\n                    <tr><td>10</td><td>Windstorm</td><td>60 ft</td><td>120 ft</td></tr>\n                    <tr><td>15</td><td>Hurricane</td><td>120 ft</td><td>240 ft</td></tr>\n                    <tr><td>20</td><td>Tornado</td><td>240 ft</td><td>480 ft</td></tr>\n                </table>\n            </div>\n\n        } else if (this.state.spellBar.length === 1 && this.state.spellBar[0] === shield) {\n\n            // Just Shield\n\n            comboDiv = (\n                <div>\n                    <div>\n                        <div style={{ fontSize: 'larger' }}><b style={{ fontSize: 'larger' }}>Shield Elemental Wall</b></div>\n                        <b style={{ fontSize: 'larger' }}>Abjuration [Force, Imbued]</b><br />\n                        <b>Components:</b> S<br />\n                        <b>Casting Time:</b> Standard<br />\n                        <b>Range:</b> See text<br />\n                        <b>Effect:</b> See text<br />\n                        <b>Duration:</b> See text<br />\n                        <b>Saving Throw:</b> None<br />\n                        <b>Spell Resistance:</b> No<br />\n                        <br />\n                        Creates a thin, yellowish, transparent, straight plane in close range or a hollow sphere of force centered on you. This has hit points, but rays and spells and effects that resemble a solid beam of light (e.g. Sunbeam) are reflected by it (this can be used to shoot rays around corners). Every round, the shield loses 5 hit points.\n                        <br /><br />\n                        You can also imbue a held object with a charge that lets you cast this regardless of the elements in your spellbar. The held object remains charged until used, or until you stop holding it. An object cannot be imbued with more than one charge from a Magicka Wizard's spells, and subsequent attempts to imbue one in this manner will replace any current effects.\n                        <br /><br />\n                        A Magicka Wizard within close range of a Shield Elemental Wall (even one not created by them) can 'Boost' this effect as a standard action which adds an amount of HP (see below) to a  maximum of four times the shield's starting HP. Boosting can be done regardless of elements or lack thereof on the spell bar.\n                        <br /><br />\n                        <table>\n                            <tr>  <th>Caster Level</th>  <th>Start/Boost HP</th> <th>Sphere Radius</th> <th>Wall Length</th>  <th>Wall Height</th></tr>\n                            <tr>  <td>1</td>  <td>15</td>  <td>10 ft</td>  <td>15 ft</td>  <td>5 ft</td></tr>\n                            <tr>  <td>2</td>  <td>30</td>  <td>10 ft</td>  <td>15 ft</td>  <td>5 ft</td></tr>\n                            <tr>  <td>3</td>  <td>40</td>  <td>10 ft</td>  <td>15 ft</td>  <td>5 ft</td></tr>\n                            <tr>  <td>4</td>  <td>55</td>  <td>10 ft</td>  <td>15 ft</td>  <td>5 ft</td></tr>\n                            <tr>  <td>5</td>  <td>70</td>  <td>15 ft</td>  <td>30 ft</td>  <td>10 ft</td></tr>\n                            <tr>  <td>6</td>  <td>95</td>  <td>15 ft</td>  <td>30 ft</td>  <td>10 ft</td></tr>\n                            <tr>  <td>7</td>  <td>120</td>  <td>15 ft</td>  <td>30 ft</td>  <td>10 ft</td></tr>\n                            <tr>  <td>8</td>  <td>150</td>  <td>15 ft</td>  <td>30 ft</td>  <td>10 ft</td></tr>\n                            <tr>  <td>9</td>  <td>175</td>  <td>15 ft</td>  <td>30 ft</td>  <td>10 ft</td></tr>\n                            <tr>  <td>10</td>  <td>200</td>  <td>30 ft</td>  <td>60 ft</td>  <td>20 ft</td></tr>\n                            <tr>  <td>11</td>  <td>220</td>  <td>30 ft</td>  <td>60 ft</td>  <td>20 ft</td></tr>\n                            <tr>  <td>12</td>  <td>240</td>  <td>30 ft</td>  <td>60 ft</td>  <td>20 ft</td></tr>\n                            <tr>  <td>13</td>  <td>260</td>  <td>30 ft</td>  <td>60 ft</td>  <td>20 ft</td></tr>\n                            <tr>  <td>14</td>  <td>280</td>  <td>30 ft</td>  <td>60 ft</td>  <td>20 ft</td></tr>\n                            <tr>  <td>15</td>  <td>300</td>  <td>60 ft</td>  <td>120 ft</td>  <td>40 ft</td></tr>\n                            <tr>  <td>16</td>  <td>340</td>  <td>60 ft</td>  <td>120 ft</td>  <td>40 ft</td></tr>\n                            <tr>  <td>17</td>  <td>380</td>  <td>60 ft</td>  <td>120 ft</td>  <td>40 ft</td></tr>\n                            <tr>  <td>18</td>  <td>420</td>  <td>60 ft</td>  <td>120 ft</td>  <td>40 ft</td></tr>\n                            <tr>  <td>19</td>  <td>460</td>  <td>60 ft</td>  <td>120 ft</td>  <td>40 ft</td></tr>\n                            <tr>  <td>20</td>  <td>500</td>  <td>120 ft</td>  <td>240 ft</td>  <td>80 ft</td></tr>\n                        </table>\n                    </div>\n                    <br />\n                    <div>\n                        <div style={{ fontSize: 'larger' }}><b style={{ fontSize: 'larger' }}>Forcefield</b></div>\n                        <b style={{ fontSize: 'larger' }}>Abjuration [Force, Personal Shield]</b><br />\n                        <b>Components:</b> None<br />\n                        <b>Casting Time:</b> Standard<br />\n                        <b>Range:</b> Personal<br />\n                        <b>Target:</b> You<br />\n                        <b>Duration:</b> See text<br />\n                        <b>Saving Throw:</b> None<br />\n                        <b>Spell Resistance:</b> No<br />\n                        <br />\n                        Creates a thin, yellowish, transparent, protective personal aura on you that grants you an armor bonus. This has hit points, but rays and spells and effects that resemble a solid beam of light (e.g. Sunbeam) are reflected by it (this can be used to shoot rays around corners). As long as the shield is active, you don't take any HP damage, which instead damages the shield. Even if a single instance of damage exceeds the shield's HP, the extra damage doesn't carry over onto you (though you will be vulnerable to subsequent instances of HP damage from different attacks or effects afterwards). Every round, the shield loses 2 hit points.\n                        <br /><br />\n                        A Magicka Wizard within close range of a Forcefield (even one not created by them) can 'Boost' this effect as a standard action which adds an amount of HP (see below) to a  maximum of the shield's starting HP.  Boosting can be done regardless of elements or lack thereof on the spell bar.\n                        <br /><br />\n                        <table>\n                            <tr>  <th>Caster Level</th> <th>Armor Bonus</th> <th>Starting HP</th>  <th>Boost HP</th></tr>\n                            <tr>  <td>1</td> <td>4</td>  <td>5</td>  <td>3</td></tr>\n                            <tr>  <td>5</td> <td>6</td>  <td>20</td>  <td>10</td></tr>\n                            <tr>  <td>10</td> <td>8</td>  <td>60</td>  <td>30</td></tr>\n                            <tr>  <td>15</td> <td>10</td>  <td>90</td>  <td>45</td></tr>\n                            <tr>  <td>20</td> <td>12</td>  <td>150</td>  <td>75</td></tr>\n                        </table>\n                    </div>\n                </div>\n            );\n\n        } else if (this.shieldCount === 1) {\n\n            // Shield\n\n            let elementsExceptShield = [...elementsUsed];\n            elementsExceptShield.splice(elementsExceptShield.findIndex(element => element === shield), 1);\n\n            let elementsExceptShieldArcaneLife = [...elementsExceptShield].filter((item) => {\n                return (item !== arcane) && (item !== life);\n            });\n\n            const armorThreshold = this.earthCount + 0.5 * this.iceCount;\n\n            let descriptorElements = [...elementsExceptShield];\n\n            if (this.iceCount > 0) {\n                descriptorElements.splice(descriptorElements.findIndex(element => element === ice), 1);\n\n                if (this.waterCount == 0) {\n                    descriptorElements.push(water);\n                }\n\n                if (this.coldCount == 0) {\n                    descriptorElements.push(cold);\n                }\n\n            }\n\n            if (this.steamCount > 0) {\n                descriptorElements.splice(descriptorElements.findIndex(element => element === steam), 1);\n\n                if (this.waterCount == 0) {\n                    descriptorElements.push(water);\n                }\n\n                if (this.fireCount == 0) {\n                    descriptorElements.push(fire);\n                }\n\n            }\n\n            const auraCount = Math.max(\n                this.waterCount, this.lifeCount, this.coldCount,\n                this.lightningCount, this.arcaneCount, this.fireCount,\n                this.poisonCount, this.steamCount,\n            );\n\n            self = (\n                <div>\n                    <div style={{ fontSize: 'larger' }}><b style={{ fontSize: 'larger' }}>{this.getElementNames(elementsExceptShield)} {armorThreshold > 0 ? 'Armor' : 'Ward'}</b></div>\n                    <b style={{ fontSize: 'larger' }}>Abjuration [{this.getElementNames(descriptorElements, ', ')}, Personal Shield]</b><br />\n                    <b>Components:</b> None<br />\n                    <b>Casting Time:</b> Standard<br />\n                    <b>Range:</b> Personal<br />\n                    <b>Target:</b> You<br />\n                    <b>Duration:</b> Permanent<br />\n                    <b>Saving Throw:</b> None<br />\n                    <b>Spell Resistance:</b> No<br />\n                    <br />\n                    Creates a {(() => {\n                        let array: string[] = [];\n\n                        if (armorThreshold > 0) {\n                            let earthAndIce: string[] = [];\n\n                            let damageReduction = 0;\n                            let armorCount = 0;\n\n                            if (this.earthCount > 0) {\n                                earthAndIce.push('earth');\n\n                                damageReduction += this.earthCount * 2.5;\n                                armorCount += 2;\n                            }\n\n                            if (this.iceCount > 0) {\n                                earthAndIce.push('ice');\n\n                                damageReduction += this.iceCount * 1.25;\n                                armorCount += 1;\n                            }\n\n                            damageReduction = Math.floor(damageReduction);\n\n\n                            array.push(`crude armor of ${earthAndIce.join(' and ')} that gives you ${damageReduction} DR/Adamantine`);\n                        };\n\n                        let elementsBesidesEarthIceAndShield = [...elementsExceptShield].filter((item) => {\n                            return (item !== earth) && (item !== ice);\n                        });\n\n                        let auraAreaString = \"you\";\n\n                        if (auraCount > 1) {\n                            auraAreaString = `all creatures and ojbects within ${(auraCount - 1) * 5} ft of you`\n                        }\n\n                        if (elementsBesidesEarthIceAndShield.length > 0) {\n                            array.push(`protective aura that makes ${auraAreaString} immune to ${this.getElementNames(elementsBesidesEarthIceAndShield, ', ', ' and ')\n                                .toLowerCase()\n                                .replace('poison', 'poison and acid')\n                                .replace('water', 'getting wet')\n                                .replace('lightning', 'electricity')\n                                .replace('steam', 'effects based on steam')\n                                .replace('arcane', 'death spells, magical death effects, energy drain, and any negative energy effects')\n                                .replace('life', 'positive energy')\n                                }`);\n                        }\n\n                        return array.join(' and a ');\n                    })()}.\n                    {(armorThreshold <= 0) ? '' : ` Depleting the temp HP destroys the armor${(auraCount <= 0) ? '.' : ', but not the ward.'}`}\n                    {(armorThreshold <= 2) ? '' : ` The armor is heavy and slows you down like medium or heavy armor. It does not count against your carrying capacity, but your weight increases by <don't know yet>.`}\n                    {(this.iceCount <= 0 ? '' : ` The armor has armor spikes.`)}\n                    {(this.waterCount <= 0) ? '' : ` ${(this.waterCount === 1 ? 'You' : 'Creatures within the aura')} can breathe underwater.`}\n                    <br /><br />\n                    {armorThreshold <= 0 ? '' : (\n                        <table>\n                            <tr>  <th>Caster Level</th> <th>Armor Bonus</th>  <th>Temp HP</th></tr>\n                            <tr>  <td>1</td> <td>{Math.floor(armorThreshold * 0.25 * 6)}</td>  <td>{Math.floor(armorThreshold * 0.25 * 10)}</td> </tr>\n                            <tr>  <td>5</td> <td>{Math.floor(armorThreshold * 0.25 * 9)}</td> <td>{Math.floor(armorThreshold * 0.25 * 40)}</td>  </tr>\n                            <tr>  <td>10</td> <td>{Math.floor(armorThreshold * 0.25 * 12)}</td> <td>{Math.floor(armorThreshold * 0.25 * 120)}</td> </tr>\n                            <tr>  <td>15</td> <td>{Math.floor(armorThreshold * 0.25 * 15)}</td> <td>{Math.floor(armorThreshold * 0.25 * 180)}</td>  </tr>\n                            <tr>  <td>20</td> <td>{Math.floor(armorThreshold * 0.25 * 18)}</td> <td>{Math.floor(armorThreshold * 0.25 * 300)}</td> </tr>\n                        </table>\n                    )}\n                </div>\n            );\n\n            comboDiv = <div>\n                {self}\n            </div>;\n\n            if (this.earthCount >= 1) {\n\n                let elementsExceptShieldAndEarth = [...elementsExceptShield];\n                elementsExceptShieldAndEarth.splice(elementsExceptShieldAndEarth.findIndex(element => element === earth), 1);\n\n                // Shield + Earth\n\n                forward = (\n                    <div>\n                        <h4>Arc {this.getElementNames(elementsExceptShieldAndEarth)} Earth Wall</h4>\n                    </div>\n                );\n\n                area = (\n                    <div>\n                        <h4>Circular {this.getElementNames(elementsExceptShieldAndEarth)} Earth Wall</h4>\n                    </div>\n                );\n\n                weapon = (\n                    <div>\n                        <h4>Straight {this.getElementNames(elementsExceptShieldAndEarth)} Earth Wall</h4>\n                    </div>\n                );\n            } else if (this.iceCount >= 1) {\n\n                let elementsExceptShieldAndIce = [...elementsExceptShield];\n                elementsExceptShieldAndIce.splice(elementsExceptShieldAndIce.findIndex(element => element === ice), 1);\n\n                // Shield + Ice\n\n                forward = (\n                    <div>\n                        <h4>Arc {this.getElementNames(elementsExceptShieldAndIce)} Ice Wall</h4>\n                    </div>\n                );\n\n                area = (\n                    <div>\n                        <h4>Circular {this.getElementNames(elementsExceptShieldAndIce)} Ice Wall</h4>\n                    </div>\n                );\n\n                weapon = (\n                    <div>\n                        <h4>Straight {this.getElementNames(elementsExceptShieldAndIce)} Ice Wall</h4>\n                    </div>\n                );\n            } else if (this.arcaneCount >= 1 || this.lifeCount >= 1) {\n\n                // Mines\n\n                forward = (\n                    <div>\n                        <h4>Arc {this.getElementNames(elementsExceptShield)} Mines</h4>\n                    </div>\n                );\n\n                area = (\n                    <div>\n                        <h4>Circular Surrounding {this.getElementNames(elementsExceptShield)} Mines</h4>\n                    </div>\n                );\n\n                weapon = (\n                    <div>\n                        <h4>Straight Line {this.getElementNames(elementsExceptShield)} Mines</h4>\n                    </div>\n                );\n            } else {\n\n                // Spray Wall\n\n                forward = (\n                    <div>\n                        <h4>Arc {this.getElementNames(elementsExceptShield)} Wall</h4>\n                    </div>\n                );\n\n                area = (\n                    <div>\n                        <h4>Circular Surrounding {this.getElementNames(elementsExceptShield)} Wall</h4>\n                    </div>\n                );\n\n                weapon = (\n                    <div>\n                        <h4>Straight Line {this.getElementNames(elementsExceptShield)} Wall</h4>\n                    </div>\n                );\n\n            }\n\n        } else if (this.earthCount >= 1) {\n\n            // Projectile\n\n            forward = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Projectile</h4>\n                </div>\n            );\n\n            area = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Quake</h4>\n                </div>\n            );\n\n            weapon = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Fissure</h4>\n                </div>\n            );\n\n            self = (\n                <div>\n                    <h4>Drop {this.getElementNames(elementsUsed)} on head</h4>\n                </div>\n            );\n\n        } else if (this.iceCount >= 1) {\n\n            // Barrage\n\n            forward = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Barrage</h4>\n                </div>\n            );\n\n            area = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Spikes</h4>\n                </div>\n            );\n\n            weapon = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Blade</h4>\n                </div>\n            );\n\n            self = (\n                <div>\n                    <h4>Drop {this.getElementNames(elementsUsed)} on head</h4>\n                </div>\n            );\n        } else if (this.arcaneCount >= 1 || this.lifeCount >= 1) {\n\n            // Beam\n\n            forward = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Beam</h4>\n                </div>\n            );\n\n            area = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Burst</h4>\n                </div>\n            );\n\n            weapon = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Blade</h4>\n                </div>\n            );\n\n            self = (\n                <div>\n                    <h4>Use {this.getElementNames(elementsUsed)} on self</h4>\n                </div>\n            );\n\n        } else if (this.lightningCount >= 1 || this.steamCount === 0) {\n\n            // Lightning\n\n            let elementsExceptLightning = [...elementsUsed];\n            elementsExceptLightning.splice(elementsExceptLightning.findIndex(element => element === lightning), 1);\n\n            forward = (\n                <div>\n                    <h4>{this.getElementNames(elementsExceptLightning)} Lightning</h4>\n                </div>\n            );\n\n            area = (\n                <div>\n                    <h4>{this.getElementNames(elementsExceptLightning)} Area Lightning</h4>\n                </div>\n            );\n\n            weapon = (\n                <div>\n                    <h4>{this.getElementNames(elements)} Blade</h4>\n                </div>\n            );\n\n            self = (\n                <div>\n                    <h4>Use {this.getElementNames(elementsUsed)} on Self</h4>\n                </div>\n            );\n        } else {\n\n            // Spray\n\n            forward = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Spray</h4>\n                </div>\n            );\n\n            area = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Area Spray</h4>\n                </div>\n            );\n\n            weapon = (\n                <div>\n                    <h4>{this.getElementNames(elementsUsed)} Blade</h4>\n                </div>\n            );\n\n            self = (\n                <div>\n                    <h4>Use {this.getElementNames(elementsUsed)} on Self</h4>\n                </div>\n            );\n        }\n\n        return (\n            <div style={{ display: 'flex' }}>\n                <div style={{ paddingLeft: '5px', paddingRight: '5px', flexShrink: 0 }}>\n                    <div style={{ height: '200px' }}>\n                        Max Elements: <input\n                            type='number'\n                            style={{ width: '50px' }}\n                            value={this.state.maxElements}\n                            onChange={(event) => {\n                                this.setState((state) => {\n                                    return {\n                                        maxElements: +event.target.value,\n                                        spellBar: state.spellBar.slice(0, +event.target.value)\n                                    }\n                                });\n                            }}\n                        ></input><br />\n                        <input\n                            type='checkbox'\n                            checked={this.state.usePoison}\n                            onChange={(event) => {\n                                this.setState((state) => {\n                                    return {\n                                        usePoison: event.target.checked,\n                                        spellBar: []\n                                    }\n                                });\n                            }}\n                        ></input> Use Poison\n                        <h3>Spell Bar</h3>\n                        <div style={{ height: '50px' }}>\n                            {this.state.spellBar.map((element) => <img src={`${element.imageLink}`} alt={`${element.name}`}></img>)}\n                        </div>\n                        <button onClick={() => { this.setState({ spellBar: [] }) }}>Clear</button>\n                    </div>\n                    <br />\n                    <br />\n                    <br />\n                    <div>\n                        {[water, life, shield, cold].slice(0, 4).map((element) => (\n                            <img\n                                style={{ cursor: 'pointer' }}\n                                src={`${element.imageLink}`}\n                                onClick={(event) => {\n                                    this.addToSpellBar(element);\n                                }}\n                                alt={`${element.name}`}\n                            >\n                            </img>))}\n                        QWER\n                        <br />\n                        {[lightning, arcane, earth, fire].slice(0, 4).map((element) => (\n                            <img\n                                style={{ cursor: 'pointer' }}\n                                src={`${element.imageLink}`}\n                                onClick={(event) => {\n                                    this.addToSpellBar(element);\n                                }}\n                                alt={`${element.name}`}\n                            >\n                            </img>))}\n                        ASDF\n                        <br />\n                        <br />\n                        <img src='images/Element_steam.webp' alt='steam'></img> = <img src='images/Element_fire.webp' alt='fireImage'></img> + <img src='images/Element_water.webp' alt='water'></img> <br />\n                        <img src='images/Element_ice.webp' alt='ice'></img> = <img src='images/Element_cold.webp' alt='coldImage'></img> + <img src='images/Element_water.webp' alt='water'></img> <br />\n                        {this.state.usePoison ? <span><img src='images/Element_poison.webp' alt='poison'></img> = <img src='images/Element_arcane.webp' alt='arcane'></img> + <img src='images/Element_water.webp' alt='water'></img></span> : ''}\n\n                    </div>\n                </div>\n                <div style={{ display: 'flex', fontSize: 'smaller', paddingLeft: '20px', paddingTop: '20px', paddingRight: '40px', paddingBottom: '20px' }}>\n                    {comboDiv}\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}